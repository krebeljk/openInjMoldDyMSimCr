#!/bin/sh
cd ${0%/*} || exit 1    # Run from this directory

# Initial files
cp -r org0 0
cp system/controlDict0 system/controlDict
cp system/fvSolution0 system/fvSolution
blockMesh
setFields

mold_deflection(){
    tail -n 10000 $1 | grep "d=" | tail -n 1 | cut -d ' ' -f 6
}

# Echoes all commands before executing.
set -o xtrace

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

# Get application name
application=`getApplication`
# cpus
cpus=`getNumberOfProcessors`

# fill
phase='_fill'
python3 tt_pts_dy.py 0
runApplication decomposePar
mv log.decomposePar 'log.decomposePar'$phase
mpirun -np $cpus -hostfile machines $application -parallel -fill 0.998 > 'log.'$application 2>&1 || exit 1
mv 'log.'$application 'log.'$application$phase
runApplication reconstructPar -newTimes
mv log.reconstructPar 'log.reconstructPar'$phase
python3 tt_pts_dy.py `mold_deflection 'log.'$application$phase`

# pack1
phase='_pack1'
latestTime=`foamListTimes -latestTime`
sed -i -e 's/^deltaT\s.*;/deltaT 1e-8;/g' $latestTime/uniform/time # change init deltaT
changeDictionary -latestTime -dict system/changeDictionaryDict.bcpack
changeDictionary -instance system -dict system/changeDictionaryDict.ctrl1
rm -r processor*
runApplication decomposePar
mv log.decomposePar 'log.decomposePar'$phase
mpirun -np $cpus -hostfile machines $application -parallel > 'log.'$application 2>&1 || exit 1
mv 'log.'$application 'log.'$application$phase
python3 tt_pts_dy.py `mold_deflection 'log.'$application$phase`

# pack2
phase='_pack2'
changeDictionary -instance system -dict system/changeDictionaryDict.ctrl2
mpirun -np $cpus -hostfile machines $application -parallel > 'log.'$application 2>&1 || exit 1
mv 'log.'$application 'log.'$application$phase
python3 tt_pts_dy.py `mold_deflection 'log.'$application$phase`

# pack3
phase='_pack3'
changeDictionary -instance system -dict system/changeDictionaryDict.ctrl3
mpirun -np $cpus -hostfile machines $application -parallel > 'log.'$application 2>&1 || exit 1
mv 'log.'$application 'log.'$application$phase
python3 tt_pts_dy.py `mold_deflection 'log.'$application$phase`
